//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('month-picker', ["web-cell"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('web-cell'));
    else
        return  this['month-picker'] = factory.call(self,this['web-cell']);

})(function (web_cell) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function _typeof(obj) {
    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
        };
    }
    return _typeof(obj);
}

function _slicedToArray(arr, i) {
    return (
        _arrayWithHoles(arr) ||
        _iterableToArrayLimit(arr, i) ||
        _nonIterableRest()
    );
}

function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for (
            var _i = arr[Symbol.iterator](), _s;
            !(_n = (_s = _i.next()).done);
            _n = true
        ) {
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally {
        try {
            if (!_n && _i['return'] != null) _i['return']();
        } finally {
            if (_d) throw _e;
        }
    }
    return _arr;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
        return call;
    }
    return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function _getPrototypeOf(o) {
              return o.__proto__ || Object.getPrototypeOf(o);
          };
    return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError(
            'Super expression must either be null or a function'
        );
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: { value: subClass, writable: true, configurable: true }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf =
        Object.setPrototypeOf ||
        function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
    return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
        );
    }
    return self;
}

function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(
        _coalesceClassElements(r.d.map(_createElementDescriptor)),
        decorators
    );
    _initializeClassElements(r.F, decorated.elements);
    return _runClassFinishers(r.F, decorated.finishers);
}

function _createElementDescriptor(def) {
    var key = _toPropertyKey(def.key);
    var descriptor;
    if (def.kind === 'method') {
        descriptor = {
            value: def.value,
            writable: true,
            configurable: true,
            enumerable: false
        };
        Object.defineProperty(def.value, 'name', {
            value: _typeof(key) === 'symbol' ? '' : key,
            configurable: true
        });
    } else if (def.kind === 'get') {
        descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'set') {
        descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === 'field') {
        descriptor = { configurable: true, writable: true, enumerable: true };
    }
    var element = {
        kind: def.kind === 'field' ? 'field' : 'method',
        key: key,
        placement: def.static
            ? 'static'
            : def.kind === 'field'
            ? 'own'
            : 'prototype',
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === 'field') element.initializer = def.value;
    return element;
}

function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) {
        other.descriptor.get = element.descriptor.get;
    } else {
        other.descriptor.set = element.descriptor.set;
    }
}

function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function isSameElement(other) {
        return (
            other.kind === 'method' &&
            other.key === element.key &&
            other.placement === element.placement
        );
    };
    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        var other;
        if (
            element.kind === 'method' &&
            (other = newElements.find(isSameElement))
        ) {
            if (
                _isDataDescriptor(element.descriptor) ||
                _isDataDescriptor(other.descriptor)
            ) {
                if (_hasDecorators(element) || _hasDecorators(other)) {
                    throw new ReferenceError(
                        'Duplicated methods (' +
                            element.key +
                            ") can't be decorated."
                    );
                }
                other.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other)) {
                        throw new ReferenceError(
                            "Decorators can't be placed on different accessors with for " +
                                'the same property (' +
                                element.key +
                                ').'
                        );
                    }
                    other.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other);
            }
        } else {
            newElements.push(element);
        }
    }
    return newElements;
}

function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}

function _isDataDescriptor(desc) {
    return (
        desc !== undefined &&
        !(desc.value === undefined && desc.writable === undefined)
    );
}

function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            var placement = element.placement;
            if (
                element.kind === kind &&
                (placement === 'static' || placement === 'prototype')
            ) {
                var receiver = placement === 'static' ? F : proto;
                _defineClassElement(receiver, element);
            }
        });
    });
}

function _initializeInstanceElements(O, elements) {
    ['method', 'field'].forEach(function(kind) {
        elements.forEach(function(element) {
            if (element.kind === kind && element.placement === 'own') {
                _defineClassElement(O, element);
            }
        });
    });
}

function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;
    if (element.kind === 'field') {
        var initializer = element.initializer;
        descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
    }
    Object.defineProperty(receiver, element.key, descriptor);
}

function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = { static: [], prototype: [], own: [] };
    elements.forEach(function(element) {
        _addElementPlacement(element, placements);
    });
    elements.forEach(function(element) {
        if (!_hasDecorators(element)) return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });
    if (!decorators) {
        return { elements: newElements, finishers: finishers };
    }
    var result = _decorateConstructor(newElements, decorators);
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
}

function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) {
        throw new TypeError('Duplicated element (' + element.key + ')');
    }
    keys.push(element.key);
}

function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];
    for (
        var decorators = element.decorators, i = decorators.length - 1;
        i >= 0;
        i--
    ) {
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras(
            (0, decorators[i])(elementObject) || elementObject
        );
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
        }
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
                _addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
        }
    }
    return { element: element, finishers: finishers, extras: extras };
}

function _decorateConstructor(elements, decorators) {
    var finishers = [];
    for (var i = decorators.length - 1; i >= 0; i--) {
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor(
            (0, decorators[i])(obj) || obj
        );
        if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
        }
        if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;
            for (var j = 0; j < elements.length - 1; j++) {
                for (var k = j + 1; k < elements.length; k++) {
                    if (
                        elements[j].key === elements[k].key &&
                        elements[j].placement === elements[k].placement
                    ) {
                        throw new TypeError(
                            'Duplicated element (' + elements[j].key + ')'
                        );
                    }
                }
            }
        }
    }
    return { elements: elements, finishers: finishers };
}

function _fromElementDescriptor(element) {
    var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
    };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === 'field') obj.initializer = element.initializer;
    return obj;
}

function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return _toArray(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, 'finisher', 'An element descriptor');
        _disallowProperty(elementObject, 'extras', 'An element descriptor');
        return element;
    });
}

function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);
    if (kind !== 'method' && kind !== 'field') {
        throw new TypeError(
            'An element descriptor\'s .kind property must be either "method" or' +
                ' "field", but a decorator created an element descriptor with' +
                ' .kind "' +
                kind +
                '"'
        );
    }
    var key = _toPropertyKey(elementObject.key);
    var placement = String(elementObject.placement);
    if (
        placement !== 'static' &&
        placement !== 'prototype' &&
        placement !== 'own'
    ) {
        throw new TypeError(
            'An element descriptor\'s .placement property must be one of "static",' +
                ' "prototype" or "own", but a decorator created an element descriptor' +
                ' with .placement "' +
                placement +
                '"'
        );
    }
    var descriptor = elementObject.descriptor;
    _disallowProperty(elementObject, 'elements', 'An element descriptor');
    var element = {
        kind: kind,
        key: key,
        placement: placement,
        descriptor: Object.assign({}, descriptor)
    };
    if (kind !== 'field') {
        _disallowProperty(elementObject, 'initializer', 'A method descriptor');
    } else {
        _disallowProperty(
            descriptor,
            'get',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'set',
            'The property descriptor of a field descriptor'
        );
        _disallowProperty(
            descriptor,
            'value',
            'The property descriptor of a field descriptor'
        );
        element.initializer = elementObject.initializer;
    }
    return element;
}

function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);
    var finisher = _optionalCallableProperty(elementObject, 'finisher');
    var extras = _toElementDescriptors(elementObject.extras);
    return { element: element, finisher: finisher, extras: extras };
}

function _fromClassDescriptor(elements) {
    var obj = { kind: 'class', elements: elements.map(_fromElementDescriptor) };
    var desc = { value: 'Descriptor', configurable: true };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
}

function _toClassDescriptor(obj) {
    var kind = String(obj.kind);
    if (kind !== 'class') {
        throw new TypeError(
            'A class descriptor\'s .kind property must be "class", but a decorator' +
                ' created a class descriptor with .kind "' +
                kind +
                '"'
        );
    }
    _disallowProperty(obj, 'key', 'A class descriptor');
    _disallowProperty(obj, 'placement', 'A class descriptor');
    _disallowProperty(obj, 'descriptor', 'A class descriptor');
    _disallowProperty(obj, 'initializer', 'A class descriptor');
    _disallowProperty(obj, 'extras', 'A class descriptor');
    var finisher = _optionalCallableProperty(obj, 'finisher');
    var elements = _toElementDescriptors(obj.elements);
    return { elements: elements, finisher: finisher };
}

function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) {
        throw new TypeError(
            objectType + " can't have a ." + name + ' property.'
        );
    }
}

function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== 'function') {
        throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
}

function _runClassFinishers(constructor, finishers) {
    for (var i = 0; i < finishers.length; i++) {
        var newConstructor = (0, finishers[i])(constructor);
        if (newConstructor !== undefined) {
            if (typeof newConstructor !== 'function') {
                throw new TypeError('Finishers must return a constructor.');
            }
            constructor = newConstructor;
        }
    }
    return constructor;
}

function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, 'string');
    return _typeof(key) === 'symbol' ? key : String(key);
}

function _toPrimitive(input, hint) {
    if (_typeof(input) !== 'object' || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || 'default');
        if (_typeof(res) !== 'object') return res;
        throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return (hint === 'string' ? String : Number)(input);
}

function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
}

function _nonIterableRest() {
    throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _iterableToArray(iter) {
    if (
        Symbol.iterator in Object(iter) ||
        Object.prototype.toString.call(iter) === '[object Arguments]'
    )
        return Array.from(iter);
}

function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

var _module_ = {
    './index.less': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;
            var _default =
                '.table-row {\n  display: table;\n  margin: 0;\n  padding: 0;\n}\n.table-row > * {\n  display: table-cell;\n  vertical-align: top;\n}\n.no-select {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: pointer;\n}\n[contenteditable][rows="1"] {\n  padding: 0.5rem;\n  height: 1.4rem;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.button,\nmain > nav > label,\nnav.table-row > *,\n#Month > span {\n  padding: 0.5rem;\n  text-align: center;\n  line-height: 1.5rem;\n  transition: 0.25s;\n}\n.button.active,\nmain > nav > input:checked + label,\nnav.table-row > span:active,\n#Month > span.active {\n  background: lightskyblue;\n  color: white;\n}\n:host {\n  display: inline-block;\n  outline: none;\n}\ndiv[contenteditable][rows="1"] {\n  border: 1px solid;\n  padding-left: 2.5rem;\n  padding-right: 2.5rem;\n  width: 8.2rem;\n  position: relative;\n}\ndiv[contenteditable]::before,\ndiv[contenteditable]::after {\n  position: absolute;\n  top: 0.5rem;\n  z-index: 1;\n  width: 1.5rem;\n  text-align: center;\n}\ndiv[contenteditable]::before {\n  content: "📅";\n  left: 0.5rem;\n}\ndiv[contenteditable]::after {\n  content: "↓";\n  right: 0.5rem;\n}\nmain.table-row {\n  display: none;\n  position: absolute;\n  z-index: 2;\n  background: white;\n  box-shadow: 1px 2px 3px gray;\n}\n:host(:focus) main.table-row {\n  display: block;\n}\nmain > nav {\n  padding-right: 0.5rem;\n}\nmain > nav > input {\n  display: none;\n}\nmain > nav > label {\n  display: block;\n}\nnav.table-row {\n  margin: auto;\n}\n#Month {\n  width: 7.5rem;\n}\n#Month > span {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1.5rem;\n}\n';
            exports.default = _default;
        }
    },
    './index.html': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;
            var _default =
                '<template>\n    <div contenteditable="true" rows="1">${host.value}</div>\n\n    <main class="table-row no-select">\n        <nav>\n            <input type="radio" name="step" value="1" id="M-1" checked="${host.isChecked( this )}">\n            <label for="M-1">Month</label>\n\n            <input type="radio" name="step" value="3" id="M-3" checked="${host.isChecked( this )}">\n            <label for="M-3">Season</label>\n\n            <input type="radio" name="step" value="6" id="M-6" checked="${host.isChecked( this )}">\n            <label for="M-6">½ year</label>\n        </nav>\n        <div>\n            <nav class="table-row">\n                <span>←</span>\n                <div>${host.year}</div>\n                <span>→</span>\n            </nav>\n            <main id="Month" data-array="months">\n                <template>\n                    <span class="${host.isSelected(view.index) ? \'active\' : \'\'}">\n                        ${view.index + 1}\n                    </span>\n                </template>\n            </main>\n        </div>\n    </main>\n</template>\n';
            exports.default = _default;
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _webCell = require('web-cell');

            var _index = _interopRequireDefault(require('./index.html'));

            var _index2 = _interopRequireDefault(require('./index.less'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var MonthPicker = _decorate(
                [
                    (0, _webCell.component)({
                        template: _index.default,
                        style: _index2.default
                    })
                ],
                function(_initialize, _HTMLElement) {
                    var MonthPicker =
                        /*#__PURE__*/
                        (function(_HTMLElement2) {
                            _inherits(MonthPicker, _HTMLElement2);

                            function MonthPicker() {
                                var _temp, _this;

                                _classCallCheck(this, MonthPicker);

                                ((_temp = _this = _possibleConstructorReturn(
                                    this,
                                    _getPrototypeOf(MonthPicker).call(this)
                                )),
                                _initialize(
                                    _assertThisInitialized(
                                        _assertThisInitialized(_this)
                                    )
                                ),
                                _temp).buildDOM();
                                return _this;
                            }

                            return MonthPicker;
                        })(_HTMLElement);

                    return {
                        F: MonthPicker,
                        d: [
                            {
                                kind: 'get',
                                decorators: [_webCell.mapProperty],
                                static: true,
                                key: 'observedAttributes',
                                value: function value() {
                                    return ['value', 'step', 'convention'];
                                }
                            },
                            {
                                kind: 'method',
                                decorators: [_webCell.mapData],
                                key: 'attributeChangedCallback',
                                value: function value() {}
                            },
                            {
                                kind: 'method',
                                key: 'connectedCallback',
                                value: function value() {
                                    var value = this.defaultValue;
                                    if (!value) return;
                                    value = value.split('-');
                                    (this.year = value[0]),
                                        (this.month = value[1] - 1);
                                }
                            },
                            {
                                kind: 'get',
                                key: 'defaultValue',
                                value: function value() {
                                    return this.getAttribute('value');
                                }
                            },
                            {
                                kind: 'get',
                                static: true,
                                key: 'data',
                                value: function value() {
                                    var now = new Date();
                                    return {
                                        value: [now],
                                        year: now.getFullYear(),
                                        month: now.getMonth(),
                                        months: Array(12)
                                            .fill(0)
                                            .map(function() {
                                                return {};
                                            }),
                                        step: 1
                                    };
                                }
                            },
                            {
                                kind: 'method',
                                static: true,
                                key: 'valueOf',
                                value: function value(date) {
                                    return /^\d+-\d+/.exec(date.toJSON())[0];
                                }
                            },
                            {
                                kind: 'set',
                                key: 'value',
                                value: function value(raw) {
                                    var _split = (raw + '').split(','),
                                        _split2 = _slicedToArray(_split, 2),
                                        start = _split2[0],
                                        end = _split2[1],
                                        value = [];

                                    if (start) value.push(new Date(start));
                                    if (end) value.push(new Date(end));
                                    this.view.value = value;
                                }
                            },
                            {
                                kind: 'get',
                                key: 'value',
                                value: function value() {
                                    var _this$view$value = _slicedToArray(
                                            this.view.value,
                                            2
                                        ),
                                        start = _this$view$value[0],
                                        end = _this$view$value[1];

                                    start = MonthPicker.valueOf(start);
                                    return end
                                        ? [start, MonthPicker.valueOf(end)]
                                        : start;
                                }
                            },
                            {
                                kind: 'get',
                                key: 'year',
                                value: function value() {
                                    return this.view.year;
                                }
                            },
                            {
                                kind: 'set',
                                key: 'year',
                                value: function value(year) {
                                    var _this$view$value2 = _slicedToArray(
                                            this.view.value,
                                            2
                                        ),
                                        start = _this$view$value2[0],
                                        end = _this$view$value2[1];

                                    start.setFullYear(year);
                                    if (end) end.setFullYear(year);
                                    this.view.render({
                                        year: year,
                                        value: [start, end]
                                    });
                                }
                            },
                            {
                                kind: 'method',
                                static: true,
                                key: 'startOf',
                                value: function value(month, step) {
                                    return month - ((month - 1) % step);
                                }
                            },
                            {
                                kind: 'get',
                                key: 'month',
                                value: function value() {
                                    return this.view.month;
                                }
                            },
                            {
                                kind: 'set',
                                key: 'month',
                                value: function value(month) {
                                    if (this.convention)
                                        month =
                                            MonthPicker.startOf(
                                                month + 1,
                                                this.step
                                            ) - 1;

                                    var _this$view$value3 = _slicedToArray(
                                            this.view.value,
                                            2
                                        ),
                                        start = _this$view$value3[0],
                                        end = _this$view$value3[1],
                                        step = this.step;

                                    start.setMonth(month);

                                    if (step > 1) {
                                        end = end || new Date();
                                        end.setFullYear(this.year);
                                        end.setUTCMonth(month + step - 1);
                                    } else {
                                        end = '';
                                    }

                                    this.view.render({
                                        month: month,
                                        value: [start, end]
                                    });
                                }
                            },
                            {
                                kind: 'method',
                                key: 'isChecked',
                                value: function value(input) {
                                    return this.step == input.value;
                                }
                            },
                            {
                                kind: 'method',
                                key: 'isSelected',
                                value: function value(index) {
                                    var month = this.month,
                                        step = this.step;
                                    var distance = index - month;
                                    return (
                                        distance >= 0 &&
                                        distance % step === distance
                                    );
                                }
                            },
                            {
                                kind: 'method',
                                decorators: [
                                    (0, _webCell.on)(
                                        'click',
                                        ':host nav > span'
                                    )
                                ],
                                key: 'changeYear',
                                value: function value(_, target) {
                                    target.nextElementSibling
                                        ? this.year--
                                        : this.year++;
                                }
                            },
                            {
                                kind: 'method',
                                decorators: [
                                    (0, _webCell.on)(
                                        'click',
                                        ':host #Month > *'
                                    )
                                ],
                                key: 'changeMonth',
                                value: function value(_, target) {
                                    this.month = (0, _webCell.indexOf)(target);
                                }
                            },
                            {
                                kind: 'method',
                                decorators: [
                                    (0, _webCell.on)(
                                        'click',
                                        ':host main > nav input'
                                    )
                                ],
                                key: 'changeStep',
                                value: function value(_, target) {
                                    this.view.render({
                                        step: +target.value
                                    });
                                    this.month = this.month;
                                }
                            }
                        ]
                    };
                },
                HTMLElement
            );

            exports.default = MonthPicker;
        }
    },
    'web-cell': {
        exports: web_cell
    }
};

    return _include_('./index');
});